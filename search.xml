<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OJ刷题总结 4</title>
      <link href="/2024/05/07/leetcode%E5%88%B7%E9%A2%98/oj%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%934/"/>
      <url>/2024/05/07/leetcode%E5%88%B7%E9%A2%98/oj%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%934/</url>
      
        <content type="html"><![CDATA[<h1 id="OJ刷题总结4——二分"><a href="#OJ刷题总结4——二分" class="headerlink" title="OJ刷题总结4——二分"></a>OJ刷题总结4——二分</h1><p>许久尚未更新，我没摆烂，准备保研这段时间着实是有点小忙。。复现论文/oj/408。。</p><h2 id="34"><a href="#34" class="headerlink" title="34"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/description/">34</a></h2><p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p><p>你必须设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p><hr><p>两次二分：</p><ol><li>找target的开始位置，也就是说，左边部分<target，右边部分>=target，返回r即可</li><li>找target的结束为止，也就是说，左边部分&lt;=target，右边部分&gt;target，返回l即可</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>())   <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">-1</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span> (l + <span class="number">1</span> != r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target)    r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r == nums.<span class="built_in">size</span>())   <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[r] == target)   ans.<span class="built_in">push_back</span>(r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        l = <span class="number">-1</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span> (l + <span class="number">1</span> != r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target + <span class="number">1</span>) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(l);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2529"><a href="#2529" class="headerlink" title="2529"></a><a href="https://leetcode.cn/problems/maximum-count-of-positive-integer-and-negative-integer/description/">2529</a></h2><p>给你一个按 <strong>非递减顺序</strong> 排列的数组 <code>nums</code> ，返回正整数数目和负整数数目中的最大值。</p><ul><li>换句话讲，如果 <code>nums</code> 中正整数的数目是 <code>pos</code> ，而负整数的数目是 <code>neg</code> ，返回 <code>pos</code> 和 <code>neg</code>二者中的最大值。</li></ul><p><strong>注意：</strong><code>0</code> 既不是正整数也不是负整数。</p><hr><p>一个朴素的做法是遍历一遍，统计一下结果。这样的时间复杂度是O(n)</p><p>然而，由于题目给的条件是非递减，因此，我们要抓住这个关键点。可以二分，找到0的位置，然后再进行比较，时间复杂度O(logn)</p><p>二分的模版，我用的是<a href="https://blog.csdn.net/WJPnb1/article/details/126360962?spm=1001.2014.3001.5502">这里的</a>，强推！不需要背什么边界条件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">-1</span>, right = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(left + <span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; <span class="number">0</span>) left = mid;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> less0 = <span class="number">0</span>, more0 = <span class="number">0</span>;</span><br><span class="line">        less0 = left + <span class="number">1</span>;</span><br><span class="line">        left = <span class="number">-1</span>, right = nums.<span class="built_in">size</span>(); </span><br><span class="line">        <span class="keyword">while</span>(left + <span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; <span class="number">0</span>) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        more0 = nums.<span class="built_in">size</span>() - right;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(less0, more0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2300"><a href="#2300" class="headerlink" title="2300"></a><a href="https://leetcode.cn/problems/successful-pairs-of-spells-and-potions/description/">2300</a></h2><p>给你两个正整数数组 <code>spells</code> 和 <code>potions</code> ，长度分别为 <code>n</code> 和 <code>m</code> ，其中 <code>spells[i]</code> 表示第 <code>i</code> 个咒语的能量强度，<code>potions[j]</code> 表示第 <code>j</code> 瓶药水的能量强度。</p><p>同时给你一个整数 <code>success</code> 。一个咒语和药水的能量强度 <strong>相乘</strong> 如果 <strong>大于等于</strong> <code>success</code> ，那么它们视为一对 <strong>成功</strong> 的组合。</p><p>请你返回一个长度为 <code>n</code> 的整数数组 <code>pairs</code>，其中 <code>pairs[i]</code> 是能跟第 <code>i</code> 个咒语成功组合的 <strong>药水</strong> 数目。</p><hr><p>每对去二分，时间复杂度O(nlgm)/O(mlgn)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">successfulPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; spells, vector&lt;<span class="type">int</span>&gt;&amp; potions, <span class="type">long</span> <span class="type">long</span> success)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">sort</span>(potions.<span class="built_in">begin</span>(), potions.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; spells.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> target = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (success % spells[i] == <span class="number">0</span>) target = success / spells[i];</span><br><span class="line">            <span class="keyword">else</span> target = success / spells[i] + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">-1</span>, right = potions.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span>(left + <span class="number">1</span> != right) &#123;</span><br><span class="line">                <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (potions[mid] &gt;= target) right = mid;</span><br><span class="line">                <span class="keyword">else</span> left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(potions.<span class="built_in">size</span>() - right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2563"><a href="#2563" class="headerlink" title="2563"></a><a href="https://leetcode.cn/problems/count-the-number-of-fair-pairs/description/">2563</a></h2><p>给你一个下标从 <strong>0</strong> 开始、长度为 <code>n</code> 的整数数组 <code>nums</code> ，和两个整数 <code>lower</code> 和 <code>upper</code> ，返回 <strong>公平数对的数目</strong> 。</p><p>如果 <code>(i, j)</code> 数对满足以下情况，则认为它是一个 <strong>公平数对</strong> ：</p><ul><li><code>0 &lt;= i &lt; j &lt; n</code>，且</li><li><code>lower &lt;= nums[i] + nums[j] &lt;= upper</code></li></ul><hr><p>每对去二分，时间复杂度O(nlgn)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countFairPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> lower, <span class="type">int</span> upper)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">-1</span>, right = n;</span><br><span class="line">            <span class="type">int</span> temp_lower = lower - nums[i];</span><br><span class="line">            <span class="type">int</span> temp_upper = upper - nums[i];</span><br><span class="line">            <span class="type">int</span> nearupper = <span class="number">0</span>, nearlower = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// r 表示第一个 &gt;= lower</span></span><br><span class="line">            <span class="keyword">while</span>(left + <span class="number">1</span> != right) &#123;</span><br><span class="line">                <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &gt;= temp_lower) right = mid;</span><br><span class="line">                <span class="keyword">else</span> left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right == n) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> nearlower = right;</span><br><span class="line">            left = <span class="number">-1</span>, right = n;</span><br><span class="line">            <span class="keyword">while</span>(left + <span class="number">1</span> != right) &#123;</span><br><span class="line">                <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (nums[mid] &lt;= temp_upper) left = mid;</span><br><span class="line">                <span class="keyword">else</span> right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> nearupper = left;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= nearlower &amp;&amp; i &lt;= nearupper) ans += nearupper - nearlower;</span><br><span class="line">            <span class="keyword">else</span> ans += nearupper - nearlower + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="275"><a href="#275" class="headerlink" title="275"></a><a href="https://leetcode.cn/problems/h-index-ii/description/">275</a></h2><p>给你一个整数数组 <code>citations</code> ，其中 <code>citations[i]</code> 表示研究者的第 <code>i</code> 篇论文被引用的次数，<code>citations</code> 已经按照 <strong>升序排列</strong> 。计算并返回该研究者的 h 指数。</p><p><a href="https://baike.baidu.com/item/h-index/3991452?fr=aladdin">h 指数的定义</a>：h 代表“高引用次数”（high citations），一名科研人员的 <code>h</code> 指数是指他（她）的 （<code>n</code> 篇论文中）<strong>至少</strong> 有 <code>h</code> 篇论文分别被引用了<strong>至少</strong> <code>h</code> 次。</p><p>请你设计并实现对数时间复杂度的算法解决此问题。</p><hr><p>这题最开始，emmmm有点难理解，哥们没发过论文wwww</p><p>我们可以这样看待这个问题：可以把citations从高到低排序，如果citations[i] &gt;= i + 1，说明h指数至少为i + 1，那么可以继续往下看；否则没i，往前看</p><p>也是个二分的问题，我们要找的左半边是满足 citations[i] &gt;= i + 1，右半边是 citations[i] &lt; i + 1。因此返回L。</p><p>在这里，我忽然感悟，二分的本质不是单调性，而是在寻求一个临界点，来分开左右两边。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = citations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">-1</span>, right = n;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">reverse</span>(citations.<span class="built_in">begin</span>(), citations.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (citations[mid] &gt;= mid + <span class="number">1</span>) left = mid;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然了，用reverse肯定就慢了</p><p>可以，反着写，只是有点反人类了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hIndex</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; citations)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = citations.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">-1</span>, right = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (citations[mid] &gt;= n - mid) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n - right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="875"><a href="#875" class="headerlink" title="875"></a><a href="https://leetcode.cn/problems/koko-eating-bananas/description/">875</a></h2><p>珂珂喜欢吃香蕉。这里有 <code>n</code> 堆香蕉，第 <code>i</code> 堆中有 <code>piles[i]</code> 根香蕉。警卫已经离开了，将在 <code>h</code> 小时后回来。</p><p>珂珂可以决定她吃香蕉的速度 <code>k</code> （单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 <code>k</code> 根。如果这堆香蕉少于 <code>k</code> 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。 </p><p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p><p>返回她可以在 <code>h</code> 小时内吃掉所有香蕉的最小速度 <code>k</code>（<code>k</code> 为整数）。</p><hr><p>二分答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; piles, <span class="type">long</span> <span class="type">long</span> mid, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; piles.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (piles[i] % mid == <span class="number">0</span>) sum += piles[i] / mid;</span><br><span class="line">            <span class="keyword">else</span> sum += piles[i] / mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum &lt;= h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minEatingSpeed</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; piles, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = piles.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            sum += piles[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> left = <span class="number">0</span>, right = sum + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left + <span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(piles, mid, h)) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2187"><a href="#2187" class="headerlink" title="2187"></a><a href="https://leetcode.cn/problems/minimum-time-to-complete-trips/description/">2187</a></h2><p>给你一个数组 <code>time</code> ，其中 <code>time[i]</code> 表示第 <code>i</code> 辆公交车完成 <strong>一趟**</strong>旅途** 所需要花费的时间。</p><p>每辆公交车可以 <strong>连续</strong> 完成多趟旅途，也就是说，一辆公交车当前旅途完成后，可以 <strong>立马开始</strong> 下一趟旅途。每辆公交车 <strong>独立</strong> 运行，也就是说可以同时有多辆公交车在运行且互不影响。</p><p>给你一个整数 <code>totalTrips</code> ，表示所有公交车 <strong>总共</strong> 需要完成的旅途数目。请你返回完成 <strong>至少</strong> <code>totalTrips</code> 趟旅途需要花费的 <strong>最少</strong> 时间。</p><hr><p>二分答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; time, <span class="type">long</span> <span class="type">long</span> mid, <span class="type">int</span> totalTrips)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; time.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((mid / time[i])) &#123;</span><br><span class="line">                sum += mid / time[i];</span><br><span class="line">                <span class="keyword">if</span> (sum &gt;= totalTrips) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">minimumTime</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; time, <span class="type">int</span> totalTrips)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(time.<span class="built_in">begin</span>(), time.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> left = time[<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> right = (<span class="type">long</span> <span class="type">long</span>) time[<span class="number">0</span>] * totalTrips + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left + <span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(time, mid, totalTrips)) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2439"><a href="#2439" class="headerlink" title="2439"></a><a href="https://leetcode.cn/problems/minimize-maximum-of-array/">2439</a></h2><p>给你一个下标从 <strong>0</strong> 开始的数组 <code>nums</code> ，它含有 <code>n</code> 个非负整数。</p><p>每一步操作中，你需要：</p><ul><li>选择一个满足 <code>1 &lt;= i &lt; n</code> 的整数 <code>i</code> ，且 <code>nums[i] &gt; 0</code> 。</li><li>将 <code>nums[i]</code> 减 1 。</li><li>将 <code>nums[i - 1]</code> 加 1 。</li></ul><p>你可以对数组执行 <strong>任意</strong> 次上述操作，请你返回可以得到的 <code>nums</code> 数组中 <strong>最大值</strong> <strong>最小</strong> 为多少。</p><hr><p>看到最大值最小化/最小值最大化，就是<strong>二分答案</strong>！！！！！</p><p>二分答案，检查这个答案是否可以</p><p>问题是，怎么个检查</p><p>现在，假设我们已经二分出一个mid了，检查这个mid是否满足呢？</p><p>可以从数组的最后一个开始，看它是否超了mid，超了就减，剩下的让前一个承受，有点像算术的减法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> extra = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i --) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + extra &gt; mid) &#123;</span><br><span class="line">                extra = (<span class="type">long</span> <span class="type">long</span>)nums[i] + extra - mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> extra = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>] + extra &lt;= mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimizeArrayValue</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">-1</span>, right = ranges::<span class="built_in">max</span>(nums) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(nums, mid)) right = mid;</span><br><span class="line">            <span class="keyword">else</span> left = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2517"><a href="#2517" class="headerlink" title="2517"></a><a href="https://leetcode.cn/problems/maximum-tastiness-of-candy-basket/description/">2517</a></h2><p>给你一个正整数数组 <code>price</code> ，其中 <code>price[i]</code> 表示第 <code>i</code> 类糖果的价格，另给你一个正整数 <code>k</code> 。</p><p>商店组合 <code>k</code> 类 <strong>不同</strong> 糖果打包成礼盒出售。礼盒的 <strong>甜蜜度</strong> 是礼盒中任意两种糖果 <strong>价格</strong> 绝对差的最小值。</p><p>返回礼盒的 <strong>最大</strong> 甜蜜度<em>。</em></p><hr><p>同样，看到最大值最小化/最小值最大化，就是<strong>二分答案</strong>！！！！！</p><p>题目着实有点难读懂</p><p>我们要求甜蜜度</p><p>甜蜜度越小，越能选k类；越大，越难选k类</p><p>这就是单调性，二分，找临界点！</p><p>[1, 2, 5, 8, 13, 21]</p><p>假设说 ans = 7</p><p>先选1，选完1之后，下一个要&gt;= 1 + 7，因此选8；选完8之后，下一个要&gt;= 8 + 7，因此选21</p><p>所以可以选出k个出来，k&lt;=3</p><p>假设说 ans = 9</p><p>先选1，选完1之后，下一个要&gt;= 1 + 9，因此选13；选完13之后，下一个要22，寄了</p><p>所以，当甜蜜度=9时，最多可以有2种打包的方案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 给定 price 和 任意两者的差 mid，求出最多的k</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; price, <span class="type">int</span> mid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span>, pre = price[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p : price) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p &gt;= pre + mid) &#123;</span><br><span class="line">                ans ++;</span><br><span class="line">                pre = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumTastiness</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; price, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(price.<span class="built_in">begin</span>(), price.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = price.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = (price[n - <span class="number">1</span>] - price[<span class="number">0</span>]) / (k - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> != right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(price, mid) &gt;= k) left = mid;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上界的解释，简单来说，就是price的平均值。因为这是一种理想的情况，当k=price.size()时，就是这个情况。正常来说间隔有大有小，会被小的限制。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OJ刷题总结 3</title>
      <link href="/2024/04/20/leetcode%E5%88%B7%E9%A2%98/oj%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%933/"/>
      <url>/2024/04/20/leetcode%E5%88%B7%E9%A2%98/oj%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%933/</url>
      
        <content type="html"><![CDATA[<p>b站链接：<a href="https://www.bilibili.com/video/BV1hd4y1r7Gq/?spm_id_from=333.999.0.0&amp;vd_source=738644d63e97553d6e3dc1cd66a642d6">https://www.bilibili.com/video/BV1hd4y1r7Gq/?spm_id_from=333.999.0.0&amp;vd_source=738644d63e97553d6e3dc1cd66a642d6</a></p><h1 id="OJ刷题总结3"><a href="#OJ刷题总结3" class="headerlink" title="OJ刷题总结3"></a>OJ刷题总结3</h1><blockquote><p>本期视频介绍了三类典型的滑动窗口题目：最短/最长/方案数，代表题目分别为209, 3, 713</p></blockquote><h2 id="Leetcode-209"><a href="#Leetcode-209" class="headerlink" title="Leetcode 209"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">Leetcode 209</a></h2><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续</strong> <strong>子数组</strong></p><p>$[nums_l, nums_l+1, …, nums_r-1, nums_r]$ ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><hr><p>看到这题时，最的朴素的做法就是2层for循环，遍历去找答案。时间复杂度为$O(n^2)$.</p><p>但是，题目说，数组全部是由正整数组成的。这个性质很重要。这意味着什么呢？？</p><p>我们先看一个例子，</p><p>target = 7, nums = [2, 3, 1, 2, 4, 3]</p><p>我们先用朴素的2层for循环看这个例子。固定右端点，移动左端点，寻找当前最短的子数组。</p><p>假设说，我们当前的右端点指向数组第四个数字，2；此时，左端点指向第一个数字，2。当前的总和为8。右端点向右移动一个，由于我们的数组全部都是正整数组成的，所以，当我们右指针向右移动一格后，总和肯定还是会大于8.因此，此时左端点就没有必要重新再枚举了。左端点只用不断的往右走，直到不满足cur_sum - nums[left] &gt;= 7（解释下这个判断条件，首先，我们明确一点，cur_sum &gt;= 7，因为之前是 &gt;= 7的，我们在做的是不断的减去 nums[left++]，找到一个紧的界使得cur_sum - nums[left] &lt; 7.而这个界就是这个判断条件）。左端点是不用往左走的（往左走，由于数组全是正整数，只会让cur_sum越来越大。），所以左端点的遍历是O(n)的，这就大大的节约了时间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right ++) &#123;</span><br><span class="line">            s += nums[right];</span><br><span class="line">            <span class="comment">// 当right固定时，left++，s减小，这就是单调性</span></span><br><span class="line">            <span class="comment">// 从满足要求到不满足要求</span></span><br><span class="line">            <span class="keyword">while</span>(s - nums[left] &gt;= target) &#123;</span><br><span class="line">                s -= nums[left];</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s &gt;= target) ans = <span class="built_in">min</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &lt;= n ? ans : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要解释下，为什么for循环中的while循环不用加left &lt;= right。假设说，当left=right了，这时s - nums[left]是不是就等于0了？target的数据范围是1 &lt;= target &lt;= 1e9，是不是就一定 s - nums[left] &lt; target了，跳出while循环。</p><h2 id="Leetcode-3"><a href="#Leetcode-3" class="headerlink" title="Leetcode 3"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/">Leetcode 3</a></h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的最长子串的长度。</p><hr><p>思路其实是一样的，只是这里我们的left指针的移动，是从不满足移动到不满足</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; s.<span class="built_in">size</span>(); right++) &#123;</span><br><span class="line">            hash[s[right]] ++;</span><br><span class="line">            <span class="keyword">while</span> (hash[s[right]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                hash[s[left]] --;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Leetcode-713"><a href="#Leetcode-713" class="headerlink" title="Leetcode 713"></a><a href="https://leetcode.cn/problems/subarray-product-less-than-k/description/">Leetcode 713</a></h2><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回子数组内所有元素的乘积严格小于 <code>k</code> 的连续子数组的数目。</p><hr><p>这题和第二题很像，虽然说题目是找所有子数组的数目，但是实际上，是要找固定右端点，左端点最左能到哪？</p><p>为什么呢？nums的数据范围：1 &lt;= nums[i] &lt;= 1000，全部都是正数，这说明只要找到了最左的边界，那么在[left, right-1]的点都能当左端点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cheng = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right ++) &#123;</span><br><span class="line">            cheng *= nums[right];</span><br><span class="line">            <span class="keyword">while</span> (cheng &gt;= k) &#123;</span><br><span class="line">                cheng /= nums[left];</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cheng &lt; k) &#123;</span><br><span class="line">                ans += right - left + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Leetcode-2958"><a href="#Leetcode-2958" class="headerlink" title="Leetcode 2958"></a><a href="https://leetcode.cn/problems/length-of-longest-subarray-with-at-most-k-frequency/description/">Leetcode 2958</a></h2><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>一个元素 <code>x</code> 在数组中的 <strong>频率</strong> 指的是它在数组中的出现次数。</p><p>如果一个数组中所有元素的频率都 <strong>小于等于</strong> <code>k</code> ，那么我们称这个数组是 <strong>好</strong> 数组。</p><p>请你返回 <code>nums</code> 中 <strong>最长好</strong> 子数组的长度。</p><p><strong>子数组</strong> 指的是一个数组中一段连续非空的元素序列。</p><hr><p>这题和Leetcode 3很像，不赘述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubarrayLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right ++) &#123;</span><br><span class="line">            hash[nums[right]] ++;</span><br><span class="line">            <span class="keyword">while</span> (hash[nums[right]] &gt; k) &#123;</span><br><span class="line">                hash[nums[left]] --;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Leetcode-2730"><a href="#Leetcode-2730" class="headerlink" title="Leetcode 2730"></a><a href="https://leetcode.cn/problems/find-the-longest-semi-repetitive-substring/">Leetcode 2730</a></h2><p>给你一个下标从 <strong>0</strong> 开始的字符串 <code>s</code> ，这个字符串只包含 <code>0</code> 到 <code>9</code> 的数字字符。</p><p>如果一个字符串 <code>t</code> 中至多有一对相邻字符是相等的，那么称这个字符串 <code>t</code> 是 <strong>半重复的</strong> 。例如，<code>0010</code> 、<code>002020</code> 、<code>0123</code> 、<code>2002</code> 和 <code>54944</code> 是半重复字符串，而 <code>00101022</code> 和 <code>1101234883</code> 不是。</p><p>请你返回 <code>s</code> 中最长 <strong>半重复</strong> 子字符串的长度。</p><p>一个 <strong>子字符串</strong> 是一个字符串中一段连续 <strong>非空</strong> 的字符。</p><hr><p>也是很类似的，和Leetcode 3，Leetcode 2958.</p><p>但是需要注意，怎么判断从一个不满足状态到满足的状态。</p><p>题目说，一个子字符串最多有一个一对相邻字符相等。说明不满足状态是有2对相邻字符相等。</p><p>从不满足状态到满足状态的过程，也就是left++后，被“抛弃掉的字符”与当前left指向的字符相等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestSemiRepetitiveSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(right &gt; <span class="number">0</span> &amp;&amp; s[right] == s[right - <span class="number">1</span>]) &#123;</span><br><span class="line">                k ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">                <span class="keyword">while</span> (s[left] != s[left - <span class="number">1</span>]) &#123;</span><br><span class="line">                    left ++;</span><br><span class="line">                &#125;</span><br><span class="line">                k --;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Leetcode-1004"><a href="#Leetcode-1004" class="headerlink" title="Leetcode 1004"></a><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/description/">Leetcode 1004</a></h2><p>给定一个二进制数组 <code>nums</code> 和一个整数 <code>k</code>，如果可以翻转最多 <code>k</code> 个 <code>0</code> ，则返回 <em>数组中连续 <code>1</code> 的最大个数</em> 。</p><hr><p>这题转了个弯，本质上是求一个nums数组中最多有k个0，其最长长度为多少？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestOnes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur_0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right ++) &#123;</span><br><span class="line">            cur_0 += nums[right] == <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (cur_0 &gt; k) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">                <span class="keyword">while</span> (nums[left - <span class="number">1</span>] != <span class="number">0</span>) left ++;</span><br><span class="line">                cur_0 -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Leetcode-2962"><a href="#Leetcode-2962" class="headerlink" title="Leetcode 2962"></a><a href="https://leetcode.cn/problems/count-subarrays-where-max-element-appears-at-least-k-times/description/">Leetcode 2962</a></h2><p>给你一个整数数组 <code>nums</code> 和一个 <strong>正整数</strong> <code>k</code> 。</p><p>请你统计有多少满足 「 <code>nums</code> 中的 <strong>最大</strong> 元素」至少出现 <code>k</code> 次的子数组，并返回满足这一条件的子数组的数目。</p><p>子数组是数组中的一个连续元素序列。</p><hr><p>本质是求至少出现k次的子数组，最短是多少？</p><p>遍历right，得到每个right对应的最大left（等价于最短的子数组长度）。</p><p>问自己一个问题，如果当前最大的left满足，是不是对于任意的 i &lt; left，组成的数组[i, right] 都是满足的呢，对吧？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> total_max = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            total_max = <span class="built_in">max</span>(total_max, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[right] == total_max) &#123;</span><br><span class="line">                cur_cnt ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur_cnt == k) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">                <span class="keyword">while</span> (nums[left - <span class="number">1</span>] != total_max) &#123;</span><br><span class="line">                    left ++;</span><br><span class="line">                &#125;</span><br><span class="line">                cur_cnt --;</span><br><span class="line">            &#125;</span><br><span class="line">            ans += left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Leetcode-1658"><a href="#Leetcode-1658" class="headerlink" title="Leetcode 1658"></a><a href="https://leetcode.cn/problems/minimum-operations-to-reduce-x-to-zero/description/">Leetcode 1658</a></h2><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>x</code> 。每一次操作时，你应当移除数组 <code>nums</code> 最左边或最右边的元素，然后从 <code>x</code> 中减去该元素的值。请注意，需要 <strong>修改</strong> 数组以供接下来的操作使用。</p><p>如果可以将 <code>x</code> <strong>恰好</strong> 减到 <code>0</code> ，返回 <strong>最小操作数</strong> ；否则，返回 <code>-1</code> 。</p><hr><p>逆向思维，等价于找到一个最长的子数组，使其和为 s - x</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 逆向思维</span></span><br><span class="line">        <span class="comment">// 找到一个最长的子数组，使其和为 s - x</span></span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(); </span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum = sum - x;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> cur_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right ++) &#123;</span><br><span class="line">            cur_sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span> (cur_sum &gt; sum) &#123;</span><br><span class="line">                cur_sum -= nums[left ++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur_sum == sum) &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, right - left + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == <span class="number">-1</span> ? <span class="number">-1</span> : n - ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Leetcode-76"><a href="#Leetcode-76" class="headerlink" title="Leetcode 76"></a><a href="https://leetcode.cn/problems/minimum-window-substring/">Leetcode 76</a></h2><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p><hr><p>这题需要我们判断一下，s的子串是否包含了t的所有字符。一个朴素的做法是遍历t，判断每一个字符是否都比s子串的少。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hash_s;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; <span class="type">hash_t</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> item : <span class="type">hash_t</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash_s[item.first] &lt; <span class="type">hash_t</span>[item.first]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="type">hash_t</span>[t[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur_len = n;</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right ++) &#123;</span><br><span class="line">            hash_s[s[right]] ++;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>()) &#123;</span><br><span class="line">                <span class="keyword">while</span>(hash_s[s[left]] &gt; <span class="type">hash_t</span>[s[left]]) &#123;</span><br><span class="line">                    hash_s[s[left ++]] --;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur_len &gt;= right - left + <span class="number">1</span>) &#123;</span><br><span class="line">                    cur_len = right - left + <span class="number">1</span>;</span><br><span class="line">                    ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i ++) &#123;</span><br><span class="line">                        ans += s[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但其实没必要每次都遍历整个t。当我们有一次成功包含了t的所有字符，后面就必要再去遍历了。<br>可以用一个less变量来存还有多少个t的字符没有被包含。</p><p>更新条件是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less -= hash_s[s[right]] == <span class="type">hash_t</span>[s[right]];</span><br></pre></td></tr></table></figure><p>当<code>less==0</code>时，说明包含成功！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hash_s;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; <span class="type">hash_t</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">minWindow</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="type">hash_t</span>[t[i]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cur_len = n;</span><br><span class="line">        <span class="type">int</span> less = <span class="type">hash_t</span>.<span class="built_in">size</span>();</span><br><span class="line">        string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (; right &lt; n; right ++) &#123;</span><br><span class="line">            hash_s[s[right]] ++;</span><br><span class="line">            less -= hash_s[s[right]] == <span class="type">hash_t</span>[s[right]];</span><br><span class="line">            <span class="keyword">if</span> (less == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(hash_s[s[left]] &gt; <span class="type">hash_t</span>[s[left]]) &#123;</span><br><span class="line">                    hash_s[s[left ++]] --;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur_len &gt;= right - left + <span class="number">1</span>) &#123;</span><br><span class="line">                    cur_len = right - left + <span class="number">1</span>;</span><br><span class="line">                    ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i ++) &#123;</span><br><span class="line">                        ans += s[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nerf_3dgs博客收藏</title>
      <link href="/2024/04/19/nerf_3dgs%E5%8D%9A%E5%AE%A2%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
      <url>/2024/04/19/nerf_3dgs%E5%8D%9A%E5%AE%A2%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 记录一些nerf，3dgs的前置知识及讲解的博客和视频</p></blockquote><p>知乎收藏夹：</p><ul><li><a href="https://www.zhihu.com/collection/949437601">https://www.zhihu.com/collection/949437601</a></li></ul><p>nerf 解读：</p><ul><li>原理：<a href="https://zhuanlan.zhihu.com/p/481275794">https://zhuanlan.zhihu.com/p/481275794</a></li><li>代码：<a href="https://zhuanlan.zhihu.com/p/482154458">https://zhuanlan.zhihu.com/p/482154458</a></li><li>相机参数与坐标系变换：<a href="https://zhuanlan.zhihu.com/p/593204605/">https://zhuanlan.zhihu.com/p/593204605/</a></li></ul><p>球协函数：</p><ul><li><a href="http://www.yindaheng98.top/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0.html#%E5%9F%BA%E5%87%BD%E6%95%B0">http://www.yindaheng98.top/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E7%90%83%E8%B0%90%E7%B3%BB%E6%95%B0.html#%E5%9F%BA%E5%87%BD%E6%95%B0</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> nerf </category>
          
          <category> 3dgs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nerf </tag>
            
            <tag> 3dgs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OJ刷题总结 2</title>
      <link href="/2024/04/18/leetcode%E5%88%B7%E9%A2%98/oj%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%932/"/>
      <url>/2024/04/18/leetcode%E5%88%B7%E9%A2%98/oj%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%932/</url>
      
        <content type="html"><![CDATA[<h1 id="OJ刷题总结-2"><a href="#OJ刷题总结-2" class="headerlink" title="OJ刷题总结 2"></a>OJ刷题总结 2</h1><p>来源于：<a href="https://www.bilibili.com/video/BV1Qg411q7ia/?spm_id_from=333.999.0.0&amp;vd_source=738644d63e97553d6e3dc1cd66a642d6">https://www.bilibili.com/video/BV1Qg411q7ia/?spm_id_from=333.999.0.0&amp;vd_source=738644d63e97553d6e3dc1cd66a642d6</a></p><p>上次更新还是上周。。不是摆烂了，是这周实在是太忙碌了。。。最近科研不是很顺畅，复现个3dgs，环境配不好。。很奇怪。。。稍微看了点代码理解了一下。。。工作到晚上9点。。剩下时间，在图书馆学习下算法，写个总结。</p><h2 id="Leetcode-11"><a href="#Leetcode-11" class="headerlink" title="Leetcode 11"></a>Leetcode 11</h2><p><strong>盛最多水的容器</strong></p><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><strong>说明：</strong>你不能倾斜容器。</p><p>借鉴一下leetcode的例图：</p><p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt=""></p><p>假设说，我们有两个指针，一左一右。分别指向红色的两个柱子。</p><p>这个时候，我们选中红色柱子中的一个柱子，和矮的的柱子构成容器（也就是右边的）：</p><ul><li>比如说第4个（从1数起），其高度为2。显然，它的高度比左指针指向的柱子低，同时，它的宽度又变小了。因此，比当前左指针和当前右指针构成的容器，容量小</li><li>我们再可以选一个高的柱子来研究一下。比如倒数第三个。这个时候，纵使它很高（哪怕无穷大），但是由于木桶原理（短板决定）。容器的最大高度还是由右指针指向的柱子，决定。同样的，宽度还是变小了</li></ul><p>因此，就和上期我讲的双指针类似(leetcode 167)。我们就可以排除当前的右指针所指向的柱子了。从而right—。继续去比较。</p><p>综上所述，我们就是不断的去比较左指针和右指针所指向的柱子高度。不断的排除掉矮的柱子。在遍历的过程中，得到最后的ans。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="built_in">min</span>(height[left], height[right]) * (right - left));</span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt;= height[right]) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                right --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Leetcode-42"><a href="#Leetcode-42" class="headerlink" title="Leetcode 42"></a>Leetcode 42</h2><p><strong>接雨水</strong></p><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p>再次借鉴leetcode的图：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt=""></p><p>嘶，我得画一下：</p><p><img src="https://xiao10ma.github.io/images/leetcode/water.jpg" alt=""></p><h3 id="1-前后缀分解"><a href="#1-前后缀分解" class="headerlink" title="1. 前后缀分解"></a>1. 前后缀分解</h3><p>如图所示，假设说，我们要计算红色这个位置，可以盛放多少的水。我们就有三个考量：</p><ol><li>左边最大的柱子高度是多少？这意味着，假设往红色的位置注水，左边最多能hold住多少的水</li><li>右边最大的柱子高度是多少？。。。</li><li>这个地方，柱子高多少？计算过1和2，这个地方理论上能放min(pre[i], suf[i])的水，但是需要排除掉这个柱子在底下所占的高度。pre[i]表示i这个位置，其左侧柱子最大高度；suf[i]表示i这个位置，其右侧柱子的最大高度。</li></ol><p>解决第一个问题，我们可以构造一个pre最大数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pre[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    pre[i] = <span class="built_in">max</span>(pre[i - <span class="number">1</span>], height[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，suf最大数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">suf[n - <span class="number">1</span>] = height[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">    suf[i] = <span class="built_in">max</span>(suf[i + <span class="number">1</span>], height[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后这个地方，i,可以放，min(pre[i], suf[i]) - height[i] 个水，加到最后的ans中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    ans += <span class="built_in">min</span>(pre[i], suf[i]) - height[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">suf</span><span class="params">(n)</span></span>;</span><br><span class="line">        pre[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            pre[i] = <span class="built_in">max</span>(pre[i - <span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        suf[n - <span class="number">1</span>] = height[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">            suf[i] = <span class="built_in">max</span>(suf[i + <span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            ans += <span class="built_in">min</span>(pre[i], suf[i]) - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><h3 id="2-双向双指针"><a href="#2-双向双指针" class="headerlink" title="2. 双向双指针"></a>2. 双向双指针</h3><p>上种做法的空间复杂度为O(n)，观察到对于pre数组，随着指针增大，pre增大；对于suf数组，随着指针减小，suf减小。我们可以想想有没有什么办法把空间复杂度降下来？？</p><p>如果说，我们有两个指针，一左一右。同时有，left_max和right_max两个变量。分别表示，left指向的位置，其左侧（包括left）最大的柱子高度；right指向的位置，其右侧（包括right）最大的柱子高度。</p><p>假设说：</p><ol><li>若left_max &lt; right_max：根据方法1，我们知道随着right—，right_max只会越来越大；随着left++，left_max也只会越来越大。因此对于当前left所指向的位置，其理论最多能乘放left_max个水，再减掉当前height[left]</li><li>同理。。不赘述，闭馆了</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> premax = <span class="number">0</span>, sufmax = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            premax = <span class="built_in">max</span>(premax, height[left]);</span><br><span class="line">            sufmax = <span class="built_in">max</span>(sufmax, height[right]);</span><br><span class="line">            <span class="keyword">if</span> (premax &lt; sufmax) &#123;</span><br><span class="line">                ans += premax - height[left++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += sufmax - height[right--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论模版</title>
      <link href="/2024/04/12/leetcode%E5%88%B7%E9%A2%98/%E5%9B%BE%E8%AE%BA%E6%A8%A1%E7%89%88/"/>
      <url>/2024/04/12/leetcode%E5%88%B7%E9%A2%98/%E5%9B%BE%E8%AE%BA%E6%A8%A1%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-743-网络延迟时间"><a href="#Leetcode-743-网络延迟时间" class="headerlink" title="Leetcode 743 网络延迟时间"></a>Leetcode 743 网络延迟时间</h1><p>遇到一个特别好的题目，以及特别的好的题解，借鉴一下，做个笔记</p><p>有 <code>n</code> 个网络节点，标记为 <code>1</code> 到 <code>n</code>。</p><p>给你一个列表 <code>times</code>，表示信号经过 <strong>有向</strong> 边的传递时间。 <code>times[i] = (ui, vi, wi)</code>，其中 <code>ui</code> 是源节点，<code>vi</code> 是目标节点， <code>wi</code> 是一个信号从源节点传递到目标节点的时间。</p><p>现在，从某个节点 <code>K</code> 发出一个信号。需要多久才能使所有节点都收到信号？如果不能使所有节点收到信号，返回 <code>-1</code> 。</p><p>题解：<a href="https://leetcode.cn/problems/network-delay-time/solutions/887186/wang-luo-yan-chi-shi-jian-dan-yuan-zui-d-m1m3/">https://leetcode.cn/problems/network-delay-time/solutions/887186/wang-luo-yan-chi-shi-jian-dan-yuan-zui-d-m1m3/</a></p><p>dfs模版：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(参数)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本节点所连接的其他节点) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        <span class="built_in">dfs</span>(图，选择的节点); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dfs:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; mp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cur_node, vector&lt;<span class="type">int</span>&gt;&amp; r, <span class="type">int</span> <span class="type">cur_t</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">cur_t</span> &lt; r[cur_node]) &#123;</span><br><span class="line">            r[cur_node] = <span class="type">cur_t</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> item : mp[cur_node]) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(item.first, r, <span class="type">cur_t</span> + item.second)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">networkDelayTime</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; times, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        mp.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> item : times) &#123;</span><br><span class="line">            mp[item[<span class="number">0</span>]][item[<span class="number">1</span>]] = item[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">        <span class="built_in">dfs</span>(k, r, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, r[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == INT_MAX) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>bfs:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; mp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">networkDelayTime</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; times, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        mp.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : times) &#123;</span><br><span class="line">            mp[edge[<span class="number">0</span>]][edge[<span class="number">1</span>]] = edge[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">        r[k] = <span class="number">0</span>;</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">push</span>(&#123;k, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> m = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (m --) &#123;</span><br><span class="line">                <span class="keyword">auto</span> cur = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> item : mp[cur.first]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r[item.first] &gt; cur.second + item.second) &#123;</span><br><span class="line">                        r[item.first] = cur.second + item.second;</span><br><span class="line">                        q.<span class="built_in">push</span>(&#123;item.first, r[item.first]&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, r[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == INT_MAX) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Dijkstra:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; mp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">networkDelayTime</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; times, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        mp.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : times) &#123;</span><br><span class="line">            mp[edge[<span class="number">0</span>]][edge[<span class="number">1</span>]] = edge[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">r</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">        r[k] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> cur = <span class="number">-1</span>, tim = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r[i] &lt; tim &amp;&amp; s.<span class="built_in">find</span>(i) == s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    cur = i;</span><br><span class="line">                    tim = r[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cur == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            s.<span class="built_in">emplace</span>(cur);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edg : mp[cur]) &#123;</span><br><span class="line">                r[edg.first] = <span class="built_in">min</span>(r[edg.first], edg.second + tim);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, r[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == INT_MAX) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Floyd:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXVALUE 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">networkDelayTime</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; times, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mp</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, MAXVALUE));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            mp[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : times) &#123;</span><br><span class="line">            mp[edge[<span class="number">0</span>]][edge[<span class="number">1</span>]] = edge[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</span><br><span class="line">                    mp[i][j] = <span class="built_in">min</span>(mp[i][j], mp[i][k] + mp[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, mp[k][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans == MAXVALUE) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OJ刷题总结 1</title>
      <link href="/2024/04/11/leetcode%E5%88%B7%E9%A2%98/oj%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%931/"/>
      <url>/2024/04/11/leetcode%E5%88%B7%E9%A2%98/oj%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%931/</url>
      
        <content type="html"><![CDATA[<h1 id="OJ刷题总结-1"><a href="#OJ刷题总结-1" class="headerlink" title="OJ刷题总结 1"></a>OJ刷题总结 1</h1><p>来源于：<a href="https://www.bilibili.com/video/BV1bP411c7oJ/?spm_id_from=333.788&amp;vd_source=738644d63e97553d6e3dc1cd66a642d6">https://www.bilibili.com/video/BV1bP411c7oJ/?spm_id_from=333.788&amp;vd_source=738644d63e97553d6e3dc1cd66a642d6</a></p><h2 id="相向双指针"><a href="#相向双指针" class="headerlink" title="相向双指针"></a>相向双指针</h2><blockquote><p><strong>此消彼长</strong>是双向双指针的核心。</p></blockquote><h3 id="leetcode-167（两数之和-II）"><a href="#leetcode-167（两数之和-II）" class="headerlink" title="leetcode 167（两数之和 II）"></a>leetcode 167（两数之和 II）</h3><p>给你一个下标从 <strong>1</strong> 开始的整数数组 <code>numbers</code> ，该数组已按 <strong>非递减顺序排列</strong> ，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code> ，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code> 。</p><p>以长度为 2 的整数数组 <code>[index1, index2]</code> 的形式返回这两个整数的下标 <code>index1</code> 和 <code>index2</code>。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><p>你所设计的解决方案必须只使用常量级的额外空间。</p><p>考虑样例<br>[2, 3, 4, 6, 8]，target = 9</p><p>无脑做法，2层for循环。但是没有用<strong>排序</strong>这个性质。</p><p>我们随便选择两个数字,[3, 8]，相加得11.由于数组已经排好序了，所以8和3到8之间的任意数字（3，4，6）相加，都大于9.所以不用再考虑了。<br>因此，我们可以设置双指针 <code>left, right</code>分别指向0和n - 1。<br>nums[left] + nums[right] == 10 &gt; 9<br>那么[2, 3, 4, 6] 中的任何一个数和 8 相加，都 &gt;= 10 &gt; 9<br>可以排除8，即8不可能是答案。right —</p><p>继续，此时[2, 6]， 2 + 6 = 8 &lt; 9。同理，用2与[3, 4, 6]中任何一个数字相加都&lt;9。因此也可以排除掉2. left ++<br>再继续，此时[3, 6]，3 + 6 = 9 == 9。找到答案，返回{left + 1, right + 1}(因为题目的下标从1开始)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[left] + numbers[right] &lt; target) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (numbers[left] + numbers[right] &gt; target) &#123;</span><br><span class="line">                right --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;left + <span class="number">1</span>, right + <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="leetcode-15（三数之和）"><a href="#leetcode-15（三数之和）" class="headerlink" title="leetcode 15（三数之和）"></a>leetcode 15（三数之和）</h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p>与上题类似。相当于是找到 j 和 k，使得nums[j] + nums[k] == -nums[i]<br>但是注意不要重复，通过与上一个num是否相等来跳过</p><p>有两个小优化：</p><ol><li>if (nums[i] + nums[i + 1] + nums[i + 2] &gt; 0) break;<br>即如果当前的nums[i]，再加上最小的两个num都仍然 &gt; 0，可以直接结束了</li><li>if (nums[i] + nums[n - 1] + nums[n - 2] &lt; 0) continue；<br>说明当前的nums[i] 太小了，即使和最大的两个num相加都不够0，直接跳过当前num，看下一个了</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> x = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; x == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (x + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (x + nums[n - <span class="number">1</span>] + nums[n - <span class="number">2</span>] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x + nums[left] + nums[right] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    left ++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x + nums[left] + nums[right] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    right --;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(&#123;x, nums[left], nums[right]&#125;);</span><br><span class="line">                    left ++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class="number">1</span>]) left ++;</span><br><span class="line">                    right --;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class="number">1</span>]) right --;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="leetcode-2824"><a href="#leetcode-2824" class="headerlink" title="leetcode 2824"></a>leetcode 2824</h3><p>给你一个下标从 <strong>0</strong> 开始长度为 <code>n</code> 的整数数组 <code>nums</code> 和一个整数 <code>target</code> ，请你返回满足 <code>0 &lt;= i &lt; j &lt; n</code> 且 <code>nums[i] + nums[j] &lt; target</code> 的下标对 <code>(i, j)</code> 的数目。</p><p>还是一样，双向双指针。排序后，left和right此消彼长。</p><p><strong>固定左端点，移动右端点</strong></p><p>利用排序的性质，如果nums[left] + nums[right] &lt; target，说明[left + 1, left + 2, …, right]与nums[left]相加，结果都是 &lt; target。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countPairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] + nums[right] &gt;= target) &#123;</span><br><span class="line">                right --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += right - left;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在做这题时，我就在想为什么是固定左端点，移动右端点呢？我们能不能固定右端点，移动左端点呢？每次ans += left。我感觉还是蛮有道理的。</p><p>但是仔细想想是不行的。因为题目给的是 &lt; target。<br>我们的右端点是往左移动的。考虑一种情况。left和right是紧紧挨着的，也就是right == left + 1.下一回合时，right —。left为了得到满足nums[left] + nums[right]的最大值下标，left ++。而我们的大前提是while(left &lt; right)，不对。但是这种情况下，仍然可以ans += left。</p><p>归根结底，是因为 &lt; target。当我们固定左端点的时候，left和right两者相遇的时候，是nums[left] + nums[right] &gt;= target的情况（因为需要right的减小来满足 &lt; target）。而固定右端点的时候，left和right两者相遇，却是因为left ++（nums[left] + nums[right]一直 &lt; target，可以一直增大left）。</p><p>说的有点绕，希望能看懂。。。我声明一下，这是类似于算法的笔记，写给自己看的。<del>您要是没看懂，去看灵神的解释（嘶，忽然想起来灵神没写）。</del>我反正尽力写了。毕竟是给自己看的hh</p><p>固定右端点，可以用二分来找左端点。<del>虽然，固定左端点，也能用二分找右端点。</del></p><h3 id="leetcode-16"><a href="#leetcode-16" class="headerlink" title="leetcode 16"></a>leetcode 16</h3><p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> 和 一个目标值 <code>target</code>。请你从 <code>nums</code> 中选出三个整数，使它们的和与 <code>target</code> 最接近。</p><p>返回这三个数的和。</p><p>假定每组输入只存在恰好一个解。</p><p>类似，给出代码：</p><p>break和continue的优化，也类似，不赘述</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> diff = INT_MAX;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i ++) &#123;</span><br><span class="line">            <span class="type">int</span> x = nums[i];</span><br><span class="line">            <span class="type">int</span> left = i + <span class="number">1</span>, right = n - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> s = x + nums[i + <span class="number">1</span>] + nums[i + <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (s &gt; target) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s - target &lt; diff) &#123;</span><br><span class="line">                    ans = s;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s = x + nums[n - <span class="number">1</span>] + nums[n - <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (s &lt; target) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target - s &lt; diff) &#123;</span><br><span class="line">                    diff = target - s;</span><br><span class="line">                    ans = s;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(target - (x + nums[left] + nums[right])) &lt; diff) &#123;</span><br><span class="line">                ans = x + nums[left] + nums[right];</span><br><span class="line">                diff = <span class="built_in">abs</span>(target - (x + nums[left] + nums[right]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x + nums[left] + nums[right] &lt; target) &#123;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (x + nums[left] + nums[right] &gt; target) &#123;</span><br><span class="line">                right --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="leetcode-18"><a href="#leetcode-18" class="headerlink" title="leetcode 18"></a>leetcode 18</h3><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p>类似，不赘述</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">3</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n - <span class="number">2</span>; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">              </span><br><span class="line">                <span class="type">long</span> s = (<span class="type">long</span>)nums[i] + nums[j] + nums[j + <span class="number">1</span>] + nums[j + <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">if</span> (s &gt; target) <span class="keyword">break</span>;</span><br><span class="line">                s = (<span class="type">long</span>)nums[i] + nums[j] + nums[n - <span class="number">1</span>] + nums[n - <span class="number">2</span>];</span><br><span class="line">                <span class="keyword">if</span> (s &lt; target) <span class="keyword">continue</span>; </span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> left = j + <span class="number">1</span>, right = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                    <span class="type">long</span> s = (<span class="type">long</span>)nums[i] + nums[j] + nums[left] + nums[right];</span><br><span class="line">                    <span class="keyword">if</span> (s &lt; target) &#123;</span><br><span class="line">                        left ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; target) &#123;</span><br><span class="line">                        right --;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        ans.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[left], nums[right]&#125;);</span><br><span class="line">                        left ++;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left - <span class="number">1</span>]) left++;</span><br><span class="line">                        right --;</span><br><span class="line">                        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right + <span class="number">1</span>]) right --;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h3 id="leetcode-611"><a href="#leetcode-611" class="headerlink" title="leetcode 611"></a>leetcode 611</h3><p>给定一个包含非负整数的数组 <code>nums</code> ，返回其中可以组成三角形三条边的三元组个数。</p><p>组成三角形，换句话说，也就是对三条边的任意两条边相加，其值都大于第三条边。</p><p>排序后，随机选出3个值，a &lt; b &lt; c。显然，a + c &gt; b, b + c &gt; a, 我们需要确定是否 a + b &gt; c。这就很像leetcode 2824这题。此时，是 &gt; target的。所以，我们是要固定右端点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">triangleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">2</span>; i --) &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>, right = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[i - <span class="number">1</span>] + nums[i - <span class="number">2</span>] &lt; nums[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] + nums[right] &lt;= nums[i]) &#123;</span><br><span class="line">                    left ++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    ans += right - left;</span><br><span class="line">                    right --;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch(python)博客收藏</title>
      <link href="/2024/03/29/pytorch%E5%8D%9A%E5%AE%A2%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
      <url>/2024/03/29/pytorch%E5%8D%9A%E5%AE%A2%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一些在看代码时遇到的一些问题及博客，方便以后忘记时回来</p></blockquote><p>知乎收藏夹：</p><ul><li><a href="https://www.zhihu.com/collection/947243718">https://www.zhihu.com/collection/947243718</a></li></ul><p>csdn收藏夹：</p><ul><li><a href="https://i.csdn.net/#/user-center/collection-list?type=1&amp;folder=36818606&amp;key=1">https://i.csdn.net/#/user-center/collection-list?type=1&amp;folder=36818606&amp;key=1</a></li></ul><p>模型save and load:</p><ul><li><a href="https://www.cnblogs.com/Zhuohome/p/15599792.html">https://www.cnblogs.com/Zhuohome/p/15599792.html</a></li></ul><p>命令行参数：</p><ul><li><a href="https://www.bilibili.com/video/BV1U4411j7xb/?spm_id_from=333.337.search-card.all.click&amp;vd_source=738644d63e97553d6e3dc1cd66a642d6">https://www.bilibili.com/video/BV1U4411j7xb/?spm_id_from=333.337.search-card.all.click&amp;vd_source=738644d63e97553d6e3dc1cd66a642d6</a></li></ul><p>cuda版本：</p><ul><li><a href="https://cloud.tencent.com/developer/article/1731440">https://cloud.tencent.com/developer/article/1731440</a></li></ul><p>Python装饰器：</p><ul><li><a href="https://foofish.net/python-decorator.html">https://foofish.net/python-decorator.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> python </tag>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假day1</title>
      <link href="/2024/01/24/%E5%AF%92%E5%81%87day1/"/>
      <url>/2024/01/24/%E5%AF%92%E5%81%87day1/</url>
      
        <content type="html"><![CDATA[<p>如上篇所言，我其实大约已经放了10天假了。标题的day1实质上是指寒假第一天开始的学习。</p><p>不得不承认，我今天又摆烂了。昨天晚上闲着无聊，在b站上找了一个天龙八部的解说看看。一看看到凌晨2点。醒来已是11点。下午继续看天龙八部的解说。晚上又约了和朋友打球。。。直到现在23:41分，才开始学习，弥补自己白天虚度的光阴。罪过罪过。</p><p>昨天晚上已经看了关于<a href="https://huggingface.co/blog/gaussian-splatting">3D gaussian splatting</a>的大致介绍，对其有了个浅显的了解。现在准备，看看意导的<a href="https://www.bilibili.com/video/BV1uV4y1Y7cA/?share_source=copy_web&amp;vd_source=bd133237b66721b62ed05d453aa32bac">视频讲解</a>。</p><p><img src="https://xiao10ma.github.io/images/diary/3dgs-introduction.png" alt=""></p><ul><li><p><strong>可微渲染</strong><br>  可微光栅化（Differentiable Rendering）是计算机图形学中的一个重要概念，近年来在机器学习和计算机视觉领域尤其受到关注。光栅化（Rasterization）是计算机图形学中将三维模型转换为二维图像的过程，它涉及将模型的顶点、边和面映射到屏幕上的像素，并确定这些像素的颜色和其他属性。</p><p>  在传统的光栅化过程中，这一转换通常是不可逆的，也就是说，一旦三维模型被转换成二维图像，就很难再从这个图像中准确地重构出原始的三维模型。这种不可逆性使得传统光栅化在一些应用场景中受限，特别是在需要高度精确的逆向推理时。</p><p>  可微光栅化是对传统光栅化的一个重要扩展，它引入了可微分的特性。这意味着在可微光栅化过程中，不仅可以从三维模型生成二维图像，还可以根据这个二维图像的变化反向推导出三维模型的变化。这一特性使得可微光栅化在机器学习和计算机视觉的应用中非常有价值，例如在三维重建、形状和外观建模、以及图像到三维的直接推理等任务中。</p><p>  在技术实现上，可微光栅化通常通过设计可微分的渲染过程来实现。这可能涉及到对渲染方程的修改，以保证在数学上的可微分性，从而可以使用基于梯度的优化方法（如反向传播算法）来调整三维模型的参数，以最小化渲染图像与目标图像之间的差异。</p><p>  总的来说，可微光栅化是一种桥接计算机图形学和计算机视觉的重要技术，它通过使光栅化过程可微分，为三维模型的自动优化和推理提供了强大的工具。</p></li><li><strong>自适应密度控制</strong><ul><li>如果该高斯图像很小，则克隆它</li><li>如果该高斯图像很大，则将其分割</li></ul></li><li><strong>大致流程</strong><br>  首先，用SfM求得点云，初始化为3D gaussians，根据Camera的外参作投影。接着做光栅化，最终渲染得到图像。训练时，基于和GT的loss，沿蓝色箭头反向传播。Differentiable tile rasterizer往左的两个箭头：上面的是更新3D gaussians的参数；下面进行自适应密度进行控制更新3D gaussians的个数。</li></ul><p>sad，深夜写博客被家里抓了。。。先睡了。。明天加油。。。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学期小结&amp;寒假计划</title>
      <link href="/2024/01/23/%E5%AD%A6%E6%9C%9F%E5%B0%8F%E7%BB%93&amp;%E5%AF%92%E5%81%87%E8%AE%A1%E5%88%92/"/>
      <url>/2024/01/23/%E5%AD%A6%E6%9C%9F%E5%B0%8F%E7%BB%93&amp;%E5%AF%92%E5%81%87%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自上次更新博客，已是很久，唯一一次更新还是更的图形学作业。之前还想着说记录记录自己的学习。但由于学业压力太大，临近期末，太多大作业以及要复习，实在是没时间写博客。</p></blockquote><h1 id="学期小结"><a href="#学期小结" class="headerlink" title="学期小结"></a>学期小结</h1><p>在大三上开学前，我去清华参加了它的图形学启明星计划的夏令营。大抵是出于运气，我被选上参加了。与我一同参加夏令营的同学真的都很优秀，每一个都感觉对图形学都很多的研究，我的一个室友，感觉更是厉害，似乎已经是在进行科研的项目了。这给我带了还算是蛮大的打击。我一直都处于中大计院的井底中，不知外界的同学们水平如何。几个关系好的高中同学也不是学习计算机的。自己看着自己的绩点排名，也是自我满足。参加完夏令营，我回到学校，心里就想着一定要搞搞科研，好好努力，弥补下自己与其他同学的差距。</p><p>回到中大，我联系了自己实验室的师兄。从games101开始逐步的学习，跟着网上的一些博客做了games101的作业。然后跟着师兄的研究兴趣，开始好好地看NeRF。大二下也算是看了一点点，但真的不是很认真。（我最开始进入HCP实验室，最主要的是想要个工位，可以固定的来读书学习，不用每天去图书馆找位子hh）后面开始看HumanNeRF，在chatGPT的帮助下，也算是基本理解了作者的思路。接下来，就是看HumanNeRF的代码，复现作者的结果。其实复现不算太难，作者已经在github上非常详细地教我们怎么去运行，终端的命令都已经给出来了。但是，其代码是真的难以理解。中大计院是不教python的，我之前也只有在人工智能实验课上用python写了点简单的作业，只用到了python最基础的语法。但是HumanNeRF里面涉及很多numpy以及pytorch的语法，我完全看不懂。看的着实艰难，没办法，硬着头皮，我把代码抛给chatGPT，在它地帮助下，我打断点，一行一行的看。大概是了解了代码的框架。那段时间我基本每天都呆在实验室到夜里11点，每天都充满了绝望，感叹自己的弱小。常常盯着屏幕，一看一下午，完全不知道怎么理解代码。毫无进展，感觉纯纯地浪费人生。在这里，我真的很感谢我的妈妈。那些天，我晚上走出实验室，已经没有共享单车。我就和妈妈打电话，走回寝室。她不断的鼓励我，让我踏实下来，一步一个脚印。同时，我也很感谢自己的一位同学，一次我遇到一个难题，想着他也在搞科研。请求他的帮助，他果断同意，我把电脑带到他寝室，与我一起debug到12:30。现在，回想起来，自己是幸运的，有这么好的父母以及伙伴们。</p><p>再谈课内学习，这学期我本人的感觉是自己真的努力了很多。大概是由于大二下的期末考烂了，排名跌了不少，内心有所不甘，想着这学期努努力，提高一下排名。这几天，已经出了几门成绩了。之前还担心期末周发烧会考差，结果考的还算是满意。努力还是有回报的。</p><p>这学期还有一个突破，我参加了计院的院运会。之前，我是从未参加过运动会的。这学期，我跟着一个同学跑了跑步，他鼓励我参加400米，我也就报名了。最后，竟然得了第8名的成绩，真的蛮开心。算是我人生中第一个关于运动的奖项。</p><p><img src="https://xiao10ma.github.io/images/diary/IMG_2686.jpg" alt=""></p><h1 id="寒假计划"><a href="#寒假计划" class="headerlink" title="寒假计划"></a>寒假计划</h1><p>寒假已经放了10天。说句实话，我这几天每天摆烂，在家里刷手机，无所事事。感觉实在是内心有愧，浪费人生。不能这样下去。特于此，写下一篇博客。也算是一种监督自己的方式，计划从今天起每天坚持学习（除去未来过几日的外出旅行），也会更新博客（记录一下所学所感）。若是哪天，我摆烂了，那天便不会有博客的更新。希望是不会的哈哈。</p><p>此时此刻，已经是晚上21:26分。计划稍后学学3D gaussian splatting，白天已经看了一会。这个真的太厉害了，对于NeRF而言真是降维打击，训练和渲染效率真是高了太多。最近，也是有很多论文的提出。卷卷卷！！</p><p>好，就写到这里吧。寒假也要开始好好努力了。最后感谢这个学期努力的自己，努力终有所回报。</p><p>最后附上一张这学期觉得很美的晚霞</p><p><img src="https://xiao10ma.github.io/images/diary/IMG_3346.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CG 大作业</title>
      <link href="/2024/01/02/%E5%9B%BE%E5%BD%A2%E5%AD%A6/CGreport/"/>
      <url>/2024/01/02/%E5%9B%BE%E5%BD%A2%E5%AD%A6/CGreport/</url>
      
        <content type="html"><![CDATA[<h1 id="CG大作业"><a href="#CG大作业" class="headerlink" title="CG大作业"></a>CG大作业</h1><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>成员：马梓培 李涛 熊蔚然</p><p>我们选取交互这个选题，想复现出⼀款游戏，“火柴人打羽毛球”。本地双人对打。</p><p>我们最终实现的效果：</p><ol><li>控制火柴人的移动，包括左移右移，向上跳跃。以及击打羽毛球</li><li>根据球拍的角度，去实现对击打羽毛球的模拟，包括球速以及角度</li><li>背后场馆观众，可以通过纹理贴图实现</li></ol><p>以下是网络上一些游戏的截图：</p><p><img src="https://xiao10ma.github.io/images/CGreport/d52d002f6ed648d88815065dea9916ac.png" alt="Alt text"></p><h3 id="1-火柴人控制原理"><a href="#1-火柴人控制原理" class="headerlink" title="1 火柴人控制原理"></a>1 火柴人控制原理</h3><p>我是基于“GAMES105-计算机角色动画基础”课程，来建模以及控制火柴人动作的。</p><p><strong>关节的种类</strong></p><div align = "center">    <img src="https://xiao10ma.github.io/images/CGreport/image.png"></div><p>因为实现的是二维平面的运动，所以关节的自由度为1，只会在一个平面上进行顺时针or逆时针的旋转。</p><p><strong>前向运动学</strong></p><p>从根节点往叶结点乘变换矩阵</p><ul><li>朝向：关节的局部坐标系相对于世界坐标系的旋转</li><li>旋转矩阵的逆就是旋转矩阵的转置： 正交矩阵的性质</li></ul><div align = "center">    <img src="https://xiao10ma.github.io/images/CGreport/image-1.png"></div><p>某一个关节处的全局旋转矩阵 = 父关节旋转矩阵 * 该关节的局部旋转矩阵</p><div align = "center">    <img src="https://xiao10ma.github.io/images/CGreport/image-2.png"></div><h3 id="2-火柴人建模（蓝色为关节）："><a href="#2-火柴人建模（蓝色为关节）：" class="headerlink" title="2 火柴人建模（蓝色为关节）："></a>2 火柴人建模（蓝色为关节）：</h3><div align = "center">    <img src="https://xiao10ma.github.io/images/CGreport/image-5.png"width="300"></div><p>举例来说，左手臂小臂的全局旋转矩阵 = 左手臂大臂的全局旋转矩阵 <em> 左手臂小臂的局部旋转矩阵；右小腿的全局旋转矩阵 = 右大腿的全局旋转矩阵 </em> 右小腿的局部旋转矩阵……</p><p>在具体实现时，通过glPushMatrix()，先把当前的矩阵压入栈中，然后进行旋转，最后通过glPopMatrix()，把当前矩阵弹出栈，恢复到之前的状态。</p><p>部分代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glPushMatrix</span>();     <span class="comment">// ArmA</span></span><br><span class="line"><span class="built_in">glRotatef</span>(armA, <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">1.f</span>);</span><br><span class="line"><span class="built_in">glPushMatrix</span>();     <span class="comment">// ArmB</span></span><br><span class="line"><span class="built_in">glTranslatef</span>(<span class="number">24.f</span>, <span class="number">-2.f</span>, <span class="number">0.f</span>);</span><br><span class="line"><span class="built_in">glRotatef</span>(armB, <span class="number">0.f</span>, <span class="number">0.f</span>, <span class="number">1.f</span>);</span><br><span class="line"><span class="built_in">drawArmB</span>();</span><br><span class="line"><span class="built_in">glPopMatrix</span>();      <span class="comment">// ArmB</span></span><br><span class="line"><span class="built_in">drawArmA</span>();</span><br><span class="line"><span class="built_in">glPopMatrix</span>();      <span class="comment">// ArmA</span></span><br></pre></td></tr></table></figure><p>这里的实现中，ArmA表示大臂，ArmB表示小臂。</p><p>例如，我们想要小臂进行旋转，需要先将大臂的旋转矩阵压入栈中。在此基础之上，才能进行小臂的局部旋转。小臂是依托于大臂的，两者之间存在一定耦合性。</p><h4 id="2-1-移动"><a href="#2-1-移动" class="headerlink" title="2.1 移动"></a>2.1 移动</h4><p>由建模直接画出，但是关节间是存在依赖关系的。</p><p>左移、右移，我模拟了人走路的姿势：</p><p><img src="https://xiao10ma.github.io/images/CGreport/%E7%A7%BB%E5%8A%A8.gif" alt="Alt text"></p><p>可以看到，正是小腿基于大腿的旋转，最后的移动是自然的，符合人类走路的方式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">right_legA = -legA_angle_vec[index];</span><br><span class="line">right_legB = -legB_angle_vec[index];</span><br><span class="line">left_legA = legA_angle_vec[index];</span><br><span class="line">index = (++index) % <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>具体实现时，因为人的走路姿势是循环的，我构造了两个数组，分别表示大腿和小腿的旋转角度。通过 <code>index = (++index) % 5</code>来更新下标，达到循环遍历数组的效果。这里我为了游戏的流畅性，将循环的频率设置为5，因此最后的人物移动可能看起来是会有点间断，不连续。</p><h4 id="2-2-跳跃"><a href="#2-2-跳跃" class="headerlink" title="2.2 跳跃"></a>2.2 跳跃</h4><p>火柴人的跳跃，我结合了物理学建模。</p><p>实时垂直方向速度：</p><script type="math/tex; mode=display">cur\_v_{y} = pre\_v_{y} - gt</script><p>实时垂直方向位置：</p><script type="math/tex; mode=display">cur\_position_y = pre\_position_y + pre\_v_y * timeSinceJump - \frac{1}{2}gt^2</script><p>这里时间 <code>t</code>的获取我是通过调用 <code>&lt;chrono&gt;</code>这个库来实现的。首先，先定义一个 <code>Common.cpp</code>源文件，定义startTime变量</p><p><code>std::chrono::steady_clock::time_point startTime = std::chrono::steady_clock::now();</code></p><p>因此，startTime变量在程序开始运行时就被定义了。在其他文件中，我们可以一样使用 <code>&lt;chrono&gt;</code>库获得当前时间，再用extern引用startTime，两者相减，便可以知道程序运行的时间。出于方便，我又定义了一个 <code>Common.h</code>头文件，用 <code>extern</code>引用startTime。其他文件直接 <code>include &#39;Common.h&#39;</code>即可，不需要重复extern。</p><p>因此，当我们想实现跳跃时。我们需要知道两个关于时间的变量，分别是跳跃起始时间，当前时间。当前时间-跳跃起始时间，便是跳跃时间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myglWideget.cpp</span></span><br><span class="line"><span class="built_in">doubleGetCurrentTimeInSeconds</span>() &#123;</span><br><span class="line">    usingnamespacestd::chrono;</span><br><span class="line"></span><br><span class="line">    returnduration_cast&lt;duration&lt;<span class="type">double</span>&gt;&gt;(steady_clock::<span class="built_in">now</span>() - startTime).<span class="built_in">count</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">player1-&gt;jumpStartTime = <span class="built_in">GetCurrentTimeInSeconds</span>();</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//player.cppp</span></span><br><span class="line"><span class="type">float</span> currentTime = <span class="built_in">playerGetCurrentTimeInSeconds</span>();</span><br><span class="line"><span class="type">float</span> timeSinceJump = currentTime - jumpStartTime;</span><br><span class="line"></span><br><span class="line">jumpHeight = jumpVelocity * timeSinceJump - <span class="number">0.5f</span> * GRAVITY * timeSinceJump * timeSinceJump;</span><br><span class="line">right_legB = <span class="number">-20.f</span>;</span><br><span class="line"><span class="keyword">if</span> (jumpHeight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    isJumping = <span class="literal">false</span>;</span><br><span class="line">    jumpHeight = <span class="number">0</span>; </span><br><span class="line">    right_legB = <span class="number">0.f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xiao10ma.github.io/images/CGreport/%E8%B7%B3%E8%B7%83.gif" alt="Alt text"></p><h4 id="2-3-挥拍"><a href="#2-3-挥拍" class="headerlink" title="2.3 挥拍"></a>2.3 挥拍</h4><p>挥拍的实现，和上面的思路基本一致。唯一不同的是，手臂旋转的角度，通过$sin(\theta)$实现，其中$\theta$属于[0,180]度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (timeSinceWave &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    isWaving = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">arm = <span class="number">-135</span> * <span class="built_in">sin</span>(<span class="number">2</span> * PI * timeSinceWave);</span><br><span class="line">armA = <span class="number">-100</span> * <span class="built_in">sin</span>(<span class="number">2</span> * PI * timeSinceWave);</span><br></pre></td></tr></table></figure><p>-135和-100度，分别是持拍的手臂和大臂的旋转角度。</p><p>另外，我还建模了发球时人物的挥拍，具体实现原理类似。</p><p><img src="https://xiao10ma.github.io/images/CGreport/12.gif" alt="Alt text"></p><h3 id="3-羽毛球运动建模"><a href="#3-羽毛球运动建模" class="headerlink" title="3 羽毛球运动建模"></a>3 羽毛球运动建模</h3><h4 id="3-1-球速"><a href="#3-1-球速" class="headerlink" title="3.1 球速"></a>3.1 球速</h4><p><img src="https://xiao10ma.github.io/images/CGreport/image-6.png" alt="Alt text"></p><p>建模击打羽毛球后，羽毛球的旋转角度，以及速度大小。</p><p>$|v_{球}| = |v_{球}|+|v_{拍}|+k\theta-C$</p><p>击打回羽毛球后，羽毛球的球速等于当前羽毛球的球速+固定拍子动能+拍子旋转角度-羽毛球球拍吸收的动能。</p><p>这是对羽毛球运动的一个简单的建模，并且符合现实。随着拍子旋转角度越大，对羽毛球速度的提升越大。对应于$k\theta$。并且羽毛球拍会吸收固定的动能，对应于$-C$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> cur_bmt_speed = <span class="built_in">sqrt</span>(curspeed_x * curspeed_x + curspeed_y * curspeed_y);</span><br><span class="line">cur_bmt_speed += <span class="number">2.f</span> * theta - <span class="number">100.f</span> + <span class="number">110.f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (whohit == <span class="number">1</span>) &#123;</span><br><span class="line">    curspeed_x = cur_bmt_speed * <span class="built_in">cos</span>((<span class="number">60</span> - theta) * PI / <span class="number">180.f</span>);</span><br><span class="line">    curspeed_y = cur_bmt_speed * <span class="built_in">sin</span>((<span class="number">60</span> - theta) * PI / <span class="number">180.f</span>);</span><br><span class="line">    prespeed_x = curspeed_x;</span><br><span class="line">    prespeed_y = curspeed_y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">elseif</span> (whohit == <span class="number">2</span>) &#123;</span><br><span class="line">    curspeed_x = -cur_bmt_speed * <span class="built_in">cos</span>((<span class="number">60</span> - theta) * PI / <span class="number">180.f</span>);</span><br><span class="line">    curspeed_y = cur_bmt_speed * <span class="built_in">sin</span>((<span class="number">60</span> - theta) * PI / <span class="number">180.f</span>);</span><br><span class="line">    prespeed_x = curspeed_x;</span><br><span class="line">    prespeed_y = curspeed_y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-球速更新"><a href="#3-2-球速更新" class="headerlink" title="3.2 球速更新"></a>3.2 球速更新</h4><p>飞行时，通过这两个公式更新球速：</p><script type="math/tex; mode=display">cur\_speed_{x} = pre\_speed_{x} - FRICTION * timeSinceHit</script><script type="math/tex; mode=display">cur\_speed_{y} = pre\_speed_{y} - GRAVITY * timeSinceHit</script><p>对应羽毛球的角度，通过反正切函数来获得。</p><p>实现代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curposition_x = preposition_x + timeSinceHit * curspeed_x;</span><br><span class="line">curposition_y = preposition_y + prespeed_y * timeSinceHit - <span class="number">0.5</span> * GRAVITY * timeSinceHit * timeSinceHit;</span><br><span class="line">curspeed_y = prespeed_y - GRAVITY * timeSinceHit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prespeed_x - FRICTION * timeSinceHit &gt; <span class="number">0</span>)</span><br><span class="line">    curspeed_x = prespeed_x - FRICTION * timeSinceHit;</span><br><span class="line"><span class="keyword">if</span> (whohit == <span class="number">1</span>)</span><br><span class="line">    angle = <span class="number">90</span> + <span class="built_in">atan</span>(curspeed_y / curspeed_x) * rad_to_deg;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    angle = <span class="number">-90</span> + <span class="built_in">atan</span>(curspeed_y / curspeed_x) * rad_to_deg;</span><br></pre></td></tr></table></figure><p><strong>羽毛球检测击中</strong></p><p>根据球拍的全局旋转矩阵获得当前时刻的球拍的中心坐标，判断羽毛球当前时刻的位置是否与球拍中心位置接近。只要两者的距离小于设定的阈值，便视为击中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> racket_global_angle = player1-&gt;arm + <span class="number">135</span>;</span><br><span class="line"><span class="type">float</span> d_x = (<span class="number">30.f</span> + <span class="number">40.f</span> * <span class="built_in">sqrt</span>(<span class="number">2.</span>)) * <span class="built_in">cos</span>(racket_global_angle / <span class="number">180</span> * PI);</span><br><span class="line"><span class="type">float</span> d_y = (<span class="number">30.f</span> + <span class="number">40.f</span> * <span class="built_in">sqrt</span>(<span class="number">2.</span>)) * <span class="built_in">sin</span>(racket_global_angle / <span class="number">180</span> * PI);</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> cur_center_x = player1-&gt;position_x + (<span class="type">float</span>)(<span class="number">95.0</span> / <span class="number">120</span> * <span class="number">10</span>) + d_x;</span><br><span class="line"><span class="type">float</span> cur_center_y = <span class="number">95.f</span> + d_y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (badminton-&gt;curposition_x &gt;= cur_center_x - bounding_box_size &amp;&amp; badminton-&gt;curposition_x &lt;= cur_center_x + bounding_box_size &amp;&amp; badminton-&gt;curposition_y &gt;= cur_center_y - bounding_box_size &amp;&amp; cur_center_y + bounding_box_size &gt;= badminton-&gt;curposition_y) &#123;</span><br><span class="line">    return1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的效果：</p><p><img src="https://xiao10ma.github.io/images/CGreport/击球.gif" alt="Alt text"></p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>这个大作业，还是蛮有意思的。它设计到了方方面面。包括物理，数学的建模，以及人物运动时，身体各个关节处的耦合性。我是学习了Games105后才对其有了浅薄的理解。从头到尾，我们的大作业都是100%原创的（至少我的部分是），这还是蛮有挑战的。所幸，在老师的建议和同学的帮助下（深夜一起debug，感谢我的好homie 李涛），我们最终完成了这个大作业。我的收获也是颇丰，虽然火柴人的建模很简单，但是我对前向运动学知识的理解加深了很多。父关节和子关节之间的联系，是很关键的，这是让火柴人动起来的重要因素！！</p>]]></content>
      
      
      <categories>
          
          <category> CG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NeRF 笔记</title>
      <link href="/2023/11/16/%E5%9B%BE%E5%BD%A2%E5%AD%A6/nerfreport/"/>
      <url>/2023/11/16/%E5%9B%BE%E5%BD%A2%E5%AD%A6/nerfreport/</url>
      
        <content type="html"><![CDATA[<h1 id="NeRF-笔记"><a href="#NeRF-笔记" class="headerlink" title="NeRF 笔记"></a>NeRF 笔记</h1><blockquote><p>写在前面<br>这原是我图形学课上论文阅读的一个作业，现放在自己博客里面，也当是我学习NeRF的一个小结。</p></blockquote><h2 id="NeRF"><a href="#NeRF" class="headerlink" title="NeRF"></a>NeRF</h2><h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>NeRF提出了一种通过使用输入视图的稀疏集来优化底层连续体积场景函数，进而实现复杂场景的新视图合成的最先进的结果的方法。使用全连接（非卷积）深度网络，输入有五个维度（空间坐标$(x,y,z)$，视角方向$(\theta,\phi)$），输出是该空间位置的体积密度$\sigma$和视角相关的color。再通过传统的体渲染技术得到最后的像素值。通过比较生成图像和ground truth作为loss，来训练神经网络。</p><h3 id="NeRF的意义是什么？"><a href="#NeRF的意义是什么？" class="headerlink" title="NeRF的意义是什么？"></a>NeRF的意义是什么？</h3><p>经典的图形学渲染流程中，我们是通过对输入的图像进行三维建模，再去进行自由视角的渲染。这就要求构建出非常高质量的三维模型才能渲染出精细的结果。但是很多情况下，三维模型的构建是比较困难的。但是NeRF基于深度学习的流程，通过对三维场景的神经表达，结合可微分渲染，可以实现端到端的训练。最终可以实现在任意视角下对模型的渲染。</p><h3 id="NeRF的基本原理"><a href="#NeRF的基本原理" class="headerlink" title="NeRF的基本原理"></a>NeRF的基本原理</h3><p>NeRF的流程基本上可以用这幅图概括：<br><img src="https://xiao10ma.github.io/images/NeRF/image.png" alt="经典 NeRF 流程图"></p><ol><li><p>沿着相机光线，采样5D坐标合成图像 (位置和观看方向)</p><p>通过$r(t) = o + td$确定光线，沿着该光线得到采样点，$r_i=r(t_i)$</p></li><li><p>将这些输入MLP以产生颜色和体积密度</p><p>将采样点的三维坐标$(x, y, z)$和相机的视角$(\theta, \phi)$作为输入，得到$\sigma$和RGB值。</p></li><li><p>使用传统体渲染技术将这些值计算为最终的RGB值</p><p>$\begin{aligned} \hat{C}(\mathbf{r}) &amp; =\sum_{i=1}^N T_i\left(1-\exp \left(-\sigma_i \delta_i\right)\right) \mathbf{c}_i, \\ T_i &amp; =\exp \left(-\sum_{j=1}^{i-1} \sigma_j \delta_j\right)\end{aligned}$</p></li><li><p>通过最小化合成图像和真实图像之间的loss来优化我们的场景表示</p><p>$\mathcal{L}=\sum_{\mathbf{r} \in \mathcal{R}}|\hat{C}(\mathbf{r})-C(\mathbf{r})|_2^2$</p></li></ol><h3 id="NeRF的一些优化"><a href="#NeRF的一些优化" class="headerlink" title="NeRF的一些优化"></a>NeRF的一些优化</h3><ol><li><p>位置编码</p><p>尽管神经网络是通用的函数近似器, 但作者发现, 让网络 $F \Theta$ 直接操作 $x y z \theta \varphi$ 输入坐标会导致渲染在表示颜色和几何形状方面的高频变化方面表现不佳。这与Rahaman最近的工作是一致的,这表明深度网络偏向于学习低频函数。他们还表明, 在将输入传递给网络之前, 使用高频函数将输入映射到更高维度的空间, 可以更好地拟合包含高频变化的数据。</p></li><li><p>View Dependence</p><p>这是基础图形学中的知识，高光依赖于视角的方向。</p></li><li><p>分层采样</p><p>利用第一次采样点预测的密度值确定第二次采样点的位置，可以减少计算的开销，同时也需要改变下体渲染公式<br>$\mathcal{L}=\sum_{\mathbf{r} \in \mathcal{R}}\left[\left|\hat{C}_c(\mathbf{r})-C(\mathbf{r})\right|_2^2+\left|\hat{C}_f(\mathbf{r})-C(\mathbf{r})\right|_2^2\right]$</p></li></ol><p>以上1，2点的举例：<br><img src="https://xiao10ma.github.io/images/NeRF/image-1.png" alt=""></p><h3 id="NeRF的局限性"><a href="#NeRF的局限性" class="headerlink" title="NeRF的局限性"></a>NeRF的局限性</h3><ol><li>最初时的NeRF计算效率比较低，训练时间长。目前，有一些模型的改善，包括instant-ngp（哈希编码）,3D Gaussian Splatting（高斯核）。目前，3D Gaussian Splatting的效果很不错，对毛发的重建很逼真！！</li><li>无法进行泛化，一个神经网络只适用于一个模型。要是想再重建模型，只能重新训练。</li><li>无法重建动态的场景</li></ol><h2 id="HumanNeRF"><a href="#HumanNeRF" class="headerlink" title="HumanNeRF"></a>HumanNeRF</h2><h3 id="Abstract-1"><a href="#Abstract-1" class="headerlink" title="Abstract"></a>Abstract</h3><p>作者介绍了一种名为“Hu-manNeRF”的自由视点渲染方法。这种方法可以应用于单目摄像头拍摄的视频，例如YouTube上的视频，其中人物进行复杂的身体动作。其核心功能是允许在视频的任何一帧暂停，然后从任意新的摄像机视角渲染主体，甚至可以为那个特定的帧和身体姿势创建一个完整的360度摄像机路径。</p><p>这项任务特别具有挑战性，因为它需要合成从各种可能在输入视频中不存在的摄像机角度看到的身体的逼真细节，以及合成如衣服褶皱和面部外观等细微之处。</p><p>该方法通过优化人物在规范的T型姿势中的体积表示，以及与之配合的运动场，将估计的规范表示映射到视频的每一帧，通过后向扭曲实现。运动场被分解为骨骼的刚性运动和非刚性运动，这些运动由深度网络产生。</p><p>研究表明，与之前的工作相比，这种方法在性能上有显著的提升，并且在未受控制的捕捉场景中，展示了从单目视频中移动人物的自由视点渲染的引人入胜的例子。</p><h3 id="HumanNeRF的基本原理"><a href="#HumanNeRF的基本原理" class="headerlink" title="HumanNeRF的基本原理"></a>HumanNeRF的基本原理</h3><p>HumanNeRF的流程基本上可以用这幅图还有一个公式概括：<br><img src="https://xiao10ma.github.io/images/NeRF/image-2.png" alt=""></p><blockquote><p>We represent a moving person with a canonical appearance volume $F_c$ warped to an observed pose to produce output appearance volume $F_o$ :</p><script type="math/tex; mode=display">F_o(\mathbf{x}, \mathbf{p})=F_c(T(\mathbf{x}, \mathbf{p})),</script><p>where $F_c: \mathbf{x} \rightarrow(\mathbf{c}, \sigma)$ maps position $\mathbf{x}$ to color $\mathbf{c}$ and density $\sigma$, and $T:\left(\mathbf{x}_o, \mathbf{p}\right) \rightarrow \mathbf{x}_c$ defines a motion field mapping points from observed space back to canonical space, guided by observed pose $\mathbf{p}=(J, \Omega)$, where $J$ includes $K$ standard 3D joint locations, and $\Omega=\left\{\boldsymbol{\omega}_i\right\}$ are local joint rotations represented as axis-angle vectors $\boldsymbol{\omega}_i$.</p></blockquote><p>我先来讲下这个公式</p><p>$T:\left(\mathbf{x}_o, \mathbf{p}\right) \rightarrow \mathbf{x}_c$这个函数将observation space（观察空间）的点和当前估计的人体pose，映射回canonical space（标准空间）的点。函数$F_c$以标准空间的点作为输入，输出color和$\sigma$。可以看到，这里其实是和传统的NeRF不同的。正如我上面所说，传统的NeRF是有5维的输入，而HumanNeRF却少了$(\theta, \phi)$。这也正是HumanNeRF的一个缺陷，即只能考虑漫反射。</p><p>再来讲讲流程图</p><p>与NeRF一样，相机发出一条射线，再采样。但是作者这里思想非常巧妙。作者运用上面的公式，将观察空间中采样的点映射回标准空间中，从标准空间中采样。有几点好处：</p><ol><li><strong>姿态不变性</strong>：通过将观察空间中的点映射到标准空间，可以将人体的不同姿态统一到一个标准化的参考姿态。这样做有助于模型更好地学习和理解人体的三维结构，而不是专注于特定的姿态或视角。</li><li><strong>数据一致性</strong>：在标准空间中处理数据可以确保不同图像或观察中的相同身体部位被一致地表示，这对于训练神经网络来说是非常重要的。这种一致性有助于网络更有效地学习和泛化。</li><li><strong>简化学习任务</strong>：将复杂的人体动态映射到一个静态的、标准化的空间，可以简化学习任务。网络不需要同时处理人体的动态变化和外观变化，而是可以专注于从标准化的视角学习人体的外观。</li><li><strong>更好的泛化能力</strong>：通过这种映射，模型可以更好地泛化到新的姿态和视角，因为它学习的是从标准化姿态到实际观察姿态的映射。这对于实际应用中的灵活性和鲁棒性是非常重要的。</li><li><strong>高效的渲染</strong>：在标准空间中进行渲染计算可以提高效率，因为可以重用对于不同观察视角相同的计算结果，而不是针对每个新视角重新计算整个场景。</li></ol><p>observation space的点映射到标准空间，作者将$T(x,p)$拆分成两部分：$T(\mathbf{x}, \mathbf{p})=T_{\text {skel }}(\mathbf{x}, \mathbf{p})+T_{\mathrm{NR}}\left(T_{\text {skel }}(\mathbf{x}, \mathbf{p}), \mathbf{p}\right)$。即骨骼和非骨骼两部分。骨骼的部分，正如其名，即为骨骼的映射。非骨骼部分，包括毛发、衣服，这些柔软的材料。</p><p>$T_{\text {skel }}(\mathbf{x}, \mathbf{p})=\sum_{i=1}^K w_o^i(\mathbf{x})\left(R_i \mathbf{x}+\mathbf{t}_i\right)$<br>刚体骨骼这里通过逆LBS实现，LBS具体实现可以参照games105(Lecture7)。逆即为从T-pose到observation pose。</p><p>$T_{\mathrm{NR}}(\mathbf{x}, \mathbf{p})=\operatorname{MLP}_{\theta_{\mathrm{NR}}}(\gamma(\mathbf{x}) ; \Omega)$<br>非骨骼这里通过MLP预测。</p><p>综上所述，HumanNeRF就是从单目摄像头出发，射出光线。在光线中采用，将采样点映射到标准空间中的点。再把标准空间的点输入神经网络，得到其$\sigma$和RGB。最后用体渲染的方式得到最后的像素值。</p><h3 id="自己跑的一些结果"><a href="#自己跑的一些结果" class="headerlink" title="自己跑的一些结果"></a>自己跑的一些结果</h3><p><img src="https://xiao10ma.github.io/images/NeRF/000026.png" alt=""><br><img src="https://xiao10ma.github.io/images/NeRF/000056.png" alt=""><br><img src="https://xiao10ma.github.io/images/NeRF/000083.png" alt=""></p><h3 id="HumanNeRF的局限性"><a href="#HumanNeRF的局限性" class="headerlink" title="HumanNeRF的局限性"></a>HumanNeRF的局限性</h3><p>HumanNeRF对于novel pose不能泛化，其原因是HumanNeRF将Observation space 映射到 canonical space 过拟合了。MonoHuman修正了这个问题。<br>HumanNeRF可能会产生类似于米其林轮胎人的效果（应用新的人体pose）：<br><img src="https://xiao10ma.github.io/images/NeRF/000047.png" alt=""></p><h2 id="MonoHuman"><a href="#MonoHuman" class="headerlink" title="MonoHuman"></a>MonoHuman</h2><blockquote><p>由于变形场是两个不同的多层感知器（MLP），并且依赖于帧或姿态，它们仍然面临过拟合问题。受上述工作的启发，我们设计了我们的共享双向变形模块，使用定义在规范空间中的相同运动权重进行前向和后向变形。</p></blockquote><p>MonoHuman主要的实现，引入$\mathbf{L}_{\text {consis }}$:</p><p>In order to add the constraint that only related to the deformation field as a regularization, we use the intuition of consistency of forward and backward deformation, the consistent loss $\mathbf{L}_{\text {consis }}$ is computed as:</p><script type="math/tex; mode=display">L_{\text {consis }}=\left\{\begin{array}{ll}d & \text { if } d \geq \theta \\0 & \text { else }\end{array} d=L_2\left(\mathbf{x}_{\mathbf{o}}, D_f\left(D_b\left(\mathbf{x}_{\mathbf{o}}, \mathbf{p}\right), \mathbf{p}\right)\right),\right.</script><p>where $L_2$ means the $L_2$ distance calculation, and it only penalize the points whose $L_2$ distance is greater than threshold $\theta$ we set to avoid over regularization.</p><ol><li><strong>前向和后向变形的一致性直觉</strong>：这意味着变形应该是可逆的。例如，如果你首先应用一个变形，然后应用其逆变形，理论上你应该回到原始状态。</li><li><p><strong>一致性损失 $\mathbf{L}_{\text {consis }}$</strong>：这是一个用来衡量变形前后一致性的损失函数。它的计算方式如下：</p><p>$L_{\text {consis }}=\left\{\begin{array}{ll}d &amp; \text { if } d \geq \theta \\ 0 &amp; \text { else }\end{array} d=L_2\left(\mathbf{x}_{\mathbf{o}}, D_f\left(D_b\left(\mathbf{x}_{\mathbf{o}}, \mathbf{p}\right), \mathbf{p}\right)\right)\right.$</p><p>其中 d 是通过以下方式计算的：</p><p>$d=L_2\left(\mathbf{x}_{\mathbf{o}}, D_f\left(D_b\left(\mathbf{x}_{\mathbf{o}}, \mathbf{p}\right), \mathbf{p}\right)\right)$</p><p>这里，$x_o$ 表示原始点，$D_f$ 和 $D_b$ 分别表示前向和后向变形函数，$p$ 表示相关参数。</p></li><li><strong>$L_2$距离计算</strong>：这是一种计算两点之间距离的方法。在这个上下文中，它用于计算变形前后点的距离。</li><li><strong>阈值$\theta$</strong>：这是一个设定的阈值，用于决定何时对点进行惩罚。如果点的$L_2$距离大于这个阈值，它将被纳入损失计算中；如果小于这个阈值，则不会。这样做的目的是为了避免过度正则化，即只对那些变形效果不佳的点施加惩罚。</li></ol><p>这是作者的一个结果，但是我运行的结果一般般，甚至感觉不如HumanNeRF</p><p><img src="https://xiao10ma.github.io/images/NeRF/backflip.gif" alt=""></p><p>我的复现结果:</p><p>mesh:</p><div align = "center">    <img src="https://xiao10ma.github.io/images/NeRF/monohumanmesh.png"width="400"></div><p>重建结果：</p><div align = "center">    <img src="https://xiao10ma.github.io/images/NeRF/monohuman.png"width="400"></div><p><a href="https://github.com/Yzmblog/MonoHuman">MonoHuman GitHub链接</a></p>]]></content>
      
      
      <categories>
          
          <category> NeRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NeRF </tag>
            
            <tag> CG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2023/11/15/my-first-blog/"/>
      <url>/2023/11/15/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次在自己的网站上写blog"><a href="#第一次在自己的网站上写blog" class="headerlink" title="第一次在自己的网站上写blog"></a>第一次在自己的网站上写blog</h1><p>前几日，见识一些佬的网站，看着是真的很帅很酷，我想着自己也要搞一个玩玩看。写来试试。以后就要常更博客，变得更厉害hhh</p><p>花了好久才稍微弄的好看些了，以后再慢慢学习吧</p><p>今天就到这里了，跑步去了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abs</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;__name__&#x27;</span> == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">fff</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
